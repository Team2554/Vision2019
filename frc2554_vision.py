#!/usr/bin/env python3

import cv2
import numpy
import math
from enum import Enum


class VisionPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__rgb_threshold_red = [43.57014388489208, 183.5653650254669]
        self.__rgb_threshold_green = [32.10431654676259, 135.9422750424448]
        self.__rgb_threshold_blue = [29.81115107913669, 120.78947368421053]

        self.rgb_threshold_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step RGB_Threshold0:
        self.__rgb_threshold_input = source0
        (self.rgb_threshold_output) = self.__rgb_threshold(
            self.__rgb_threshold_input,
            self.__rgb_threshold_red,
            self.__rgb_threshold_green,
            self.__rgb_threshold_blue,
        )

    @staticmethod
    def __rgb_threshold(input, red, green, blue):
        """Segment an image based on color ranges.
        Args:
            input: A BGR numpy.ndarray.
            red: A list of two numbers the are the min and max red.
            green: A list of two numbers the are the min and max green.
            blue: A list of two numbers the are the min and max blue.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2RGB)
        return cv2.inRange(
            out, (red[0], green[0], blue[0]), (red[1], green[1], blue[1])
        )


import networktables
from networktables import NetworkTableInstance


def extra_processing(pipeline):
    center_x_positions = []
    center_y_positions = []

    widths = []
    heights = []

    for contour in pipeline.filter_countours_output:
        x, y, w, h = cv2.boundingRect(countour)
        center_x_positions.append(x + w / 2)
        center_y_positions.append(y + h / 2)
        widths.append(w)
        heights.append(h)

    table = NetworkTable.getTable("/vision")
    table.putValue("centerX", NumberArray.from_list(center_x_positions))
    table.putValue("centerY", NumberArray.from_list(center_y_positions))
    table.putValue("width", NumberArray.from_list(widths))
    table.putValue("height", NumberArray.from_list(heights))


def main():
    print("Initializing")
    NetworkTable.setClientMode()
    NetworkTable.setIPAddress("localhost")
    NetworkTable.initialize()

    print("Video capture")
    cap = cv2.VideoCapture(0)

    print("Creating pipeline")
    pipeline = VisionPipeline()

    while cap.isOpened():
        have_frame, frame = cap.read()
        if have_frame:
            pipeline.process(frame)
            extra_processing(pipeline)

    print("Capture closed")


if __name__ == "__main__":
    main()
